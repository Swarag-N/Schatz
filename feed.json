{
    "version": "https://jsonfeed.org/version/1",
    "title": "Schatz",
    "home_page_url": "https://swarag-n.github.io/Schatz/",
    "feed_url": "https://swarag-n.github.io/Schatz/feed.json",
    "description": "Journey to One Piece",
    "icon": "https://swarag-n.github.io/Schatz/apple-touch-icon.png",
    "favicon": "https://swarag-n.github.io/Schatz/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Swarag Narayanasetty",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/19/median-of-2-sorted-arrays-of-different-sizes",
            "title": "Median of 2 Sorted Arrays of Different Sizes",
            "summary": "Given two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.",
            "content_text": "Problem StatementGiven two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.Appris  In Python, it is important have integer decimal, as integer itself    5.0 -&gt; 55.1 -&gt; 5.1         In Java, Divide by double to convert the return into double, rather than type conversion.Note to self  The naive approach would be to merge the two arrays and return the median element(s).  But for the naive method, there is a lot of overhead. We only need the midst element(s). So we could do what we do in merge sort, iterate over the two arrays and have a counter to reach the middle element(s).  This can be achieved in serval ways, one of which is to create an auxiliary array of size (m + n) /2 +1. (We only need the middle element(s)). Therefore this space is more than enough.  But I believe this can be further optimized, by only storing one extra element, in the case of an even number of elements.May reduce the space complexity but not the complexity, cause a check to be done several timesEdge Case  Look for Odd and Even number of elements. Check explicitly for even number of total elements41 2 3 465 6 7 8 9 101412SolutionJavaclass GFG {     static double medianOfArrays(int n, int m, int a[], int b[])     {        // Your Code Here        int mid = ((n+m)/2)+1;        int[] arr = new int[mid];                int i=0,j=0,k=0;                while(k&lt;mid &amp;&amp; i&lt;n &amp;&amp; j&lt;m ){            if(a[i]&lt;=b[j]){                arr[k++]=a[i++];            }else{                arr[k++]=b[j++];            }        }                while(k&lt;mid &amp;&amp; i&lt;n){            arr[k++]=a[i++];        }                while(k&lt;mid &amp;&amp; j&lt;m){            arr[k++]=b[j++];        }                if((n+m)%2==1){            return arr[mid-1];        }else{            return (arr[mid-1] + arr[mid-2])/2.0;        }    }}Pythonclass Solution:    def MedianOfArrays(self, array1, array2):        #code here        \"\"\"        Naive approach        \"\"\"        a = array1+array2        a.sort();                n = len(a);        if(n%2==0):            val = (a[n//2]+a[n//2-1])/2            if int(val)!=val:                return val            else:                return int(val);        else:            return a[n//2];",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given two sorted arrays array1 and array2 of size m and n respectively. Find the median of the two sorted arrays.</p><h2 id=\"appris\">Appris</h2><ul>  <li>In Python, it is important have integer decimal, as integer itself    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>5.0 -&gt; 55.1 -&gt; 5.1 </code></pre></div>    </div>  </li>  <li>In Java, Divide by double to convert the return into double, rather than type conversion.</li></ul><h2 id=\"note-to-self\">Note to self</h2><ul>  <li>The naive approach would be to merge the two arrays and return the median element(s).</li>  <li>But for the naive method, there is a lot of overhead. We only need the midst element(s). So we could do what we do in merge sort, iterate over the two arrays and have a counter to reach the middle element(s).</li>  <li>This can be achieved in serval ways, one of which is to create an auxiliary array of size (m + n) /2 +1. (We only need the middle element(s)). Therefore this space is more than enough.</li>  <li>But I believe this can be further optimized, by only storing one extra element, in the case of an even number of elements.May reduce the space complexity but not the complexity, cause a check to be done several times</li></ul><h2 id=\"edge-case\">Edge Case</h2><ul>  <li>Look for <code>Odd</code> and <code>Even</code> number of elements. Check explicitly for even number of total elements</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>41 2 3 465 6 7 8 9 10</code></pre></div></div><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1412</code></pre></div></div><h3 id=\"solution\">Solution</h3><h3 id=\"java\">Java</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">GFG</span> <span class=\"o\">{</span>     <span class=\"kd\">static</span> <span class=\"kt\">double</span> <span class=\"nf\">medianOfArrays</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">[])</span>     <span class=\"o\">{</span>        <span class=\"c1\">// Your Code Here</span>        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"o\">)/</span><span class=\"mi\">2</span><span class=\"o\">)+</span><span class=\"mi\">1</span><span class=\"o\">;</span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">];</span>                <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>                <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">m</span> <span class=\"o\">){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]&lt;=</span><span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]){</span>                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]=</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>                <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]=</span><span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>                <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">){</span>            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]=</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">++];</span>        <span class=\"o\">}</span>                <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">m</span><span class=\"o\">){</span>            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">++]=</span><span class=\"n\">b</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">++];</span>        <span class=\"o\">}</span>                <span class=\"k\">if</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"o\">)%</span><span class=\"mi\">2</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"o\">){</span>            <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>            <span class=\"k\">return</span> <span class=\"o\">(</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">mid</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">])/</span><span class=\"mf\">2.0</span><span class=\"o\">;</span>        <span class=\"o\">}</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div><h4 id=\"python\">Python</h4><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>    <span class=\"k\">def</span> <span class=\"nf\">MedianOfArrays</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">array1</span><span class=\"p\">,</span> <span class=\"n\">array2</span><span class=\"p\">):</span>        <span class=\"c1\">#code here</span>        <span class=\"s\">\"\"\"        Naive approach        \"\"\"</span>        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">array1</span><span class=\"o\">+</span><span class=\"n\">array2</span>        <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">();</span>                <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">):</span>            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"mi\">2</span>            <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"o\">!=</span><span class=\"n\">val</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"n\">val</span>            <span class=\"k\">else</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">];</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/19/median-of-2-sorted-arrays-of-different-sizes",
            
            
            
            "tags": ["gfg","potd","java","python","hard","appris","edge_case"],
            
            "date_published": "2021-09-19T00:00:00-05:00",
            "date_modified": "2021-09-19T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/19/expression-add-operators",
            "title": "Expression Add Operators",
            "summary": "Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators '+', '-', or '*' between the digits of num so that the resultant expression evaluates to the target value.",
            "content_text": "Problem StatementGiven a string num that contains only digits and an integer target, return all possibilities to add the binary operators ‘+’, ‘-‘, or ‘*’ between the digits of num so that the resultant expression evaluates to the target value.Edge Case  10-5, this should give a hint of an option of no operation is also an operation    Input: num = \"105\", target = 5Output: [\"1*0+5\",\"10-5\"]      Appris  String Builder preety much works like python list.Note  This the officail solution given by leetcode editorialSolutionclass Solution {  public ArrayList&lt;String&gt; answer;  public String digits;  public long target;  public void recurse(      int index, long previousOperand, long currentOperand, long value, ArrayList&lt;String&gt; ops) {    String nums = this.digits;    // Done processing all the digits in num    if (index == nums.length()) {      // If the final value == target expected AND      // no operand is left unprocessed      if (value == this.target &amp;&amp; currentOperand == 0) {        StringBuilder sb = new StringBuilder();        ops.subList(1, ops.size()).forEach(v -&gt; sb.append(v));        this.answer.add(sb.toString());      }      return;    }    // Extending the current operand by one digit    currentOperand = currentOperand * 10 + Character.getNumericValue(nums.charAt(index));    String current_val_rep = Long.toString(currentOperand);    int length = nums.length();    // To avoid cases where we have 1 + 05 or 1 * 05 since 05 won't be a    // valid operand. Hence this check    if (currentOperand &gt; 0) {      // NO OP recursion      recurse(index + 1, previousOperand, currentOperand, value, ops);    }    // ADDITION    ops.add(\"+\");    ops.add(current_val_rep);    recurse(index + 1, currentOperand, 0, value + currentOperand, ops);    ops.remove(ops.size() - 1);    ops.remove(ops.size() - 1);    if (ops.size() &gt; 0) {      // SUBTRACTION      ops.add(\"-\");      ops.add(current_val_rep);      recurse(index + 1, -currentOperand, 0, value - currentOperand, ops);      ops.remove(ops.size() - 1);      ops.remove(ops.size() - 1);      // MULTIPLICATION      ops.add(\"*\");      ops.add(current_val_rep);      recurse(          index + 1,          currentOperand * previousOperand,          0,          value - previousOperand + (currentOperand * previousOperand),          ops);      ops.remove(ops.size() - 1);      ops.remove(ops.size() - 1);    }  }  public List&lt;String&gt; addOperators(String num, int target) {    if (num.length() == 0) {      return new ArrayList&lt;String&gt;();    }    this.target = target;    this.digits = num;    this.answer = new ArrayList&lt;String&gt;();    this.recurse(0, 0, 0, 0, new ArrayList&lt;String&gt;());    return this.answer;  }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators ‘+’, ‘-‘, or ‘*’ between the digits of num so that the resultant expression evaluates to the target value.</p><h2 id=\"edge-case\">Edge Case</h2><ul>  <li><code>10-5</code>, this should give a hint of an option of no operation is also an operation    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Input: num = \"105\", target = 5Output: [\"1*0+5\",\"10-5\"]</code></pre></div>    </div>  </li></ul><h2 id=\"appris\">Appris</h2><ul>  <li>String Builder preety much works like python list.</li></ul><h2 id=\"note\">Note</h2><ul>  <li>This the officail solution given by leetcode editorial</li></ul><h3 id=\"solution\">Solution</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>  <span class=\"kd\">public</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">answer</span><span class=\"o\">;</span>  <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"n\">digits</span><span class=\"o\">;</span>  <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"n\">target</span><span class=\"o\">;</span>  <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">recurse</span><span class=\"o\">(</span>      <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">previousOperand</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">{</span>    <span class=\"nc\">String</span> <span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">digits</span><span class=\"o\">;</span>    <span class=\"c1\">// Done processing all the digits in num</span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">())</span> <span class=\"o\">{</span>      <span class=\"c1\">// If the final value == target expected AND</span>      <span class=\"c1\">// no operand is left unprocessed</span>      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">target</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">currentOperand</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"nc\">StringBuilder</span> <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>        <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">subList</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">));</span>        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">answer</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>      <span class=\"o\">}</span>      <span class=\"k\">return</span><span class=\"o\">;</span>    <span class=\"o\">}</span>    <span class=\"c1\">// Extending the current operand by one digit</span>    <span class=\"n\">currentOperand</span> <span class=\"o\">=</span> <span class=\"n\">currentOperand</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"nc\">Character</span><span class=\"o\">.</span><span class=\"na\">getNumericValue</span><span class=\"o\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">index</span><span class=\"o\">));</span>    <span class=\"nc\">String</span> <span class=\"n\">current_val_rep</span> <span class=\"o\">=</span> <span class=\"nc\">Long</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">currentOperand</span><span class=\"o\">);</span>    <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>    <span class=\"c1\">// To avoid cases where we have 1 + 05 or 1 * 05 since 05 won't be a</span>    <span class=\"c1\">// valid operand. Hence this check</span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentOperand</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>      <span class=\"c1\">// NO OP recursion</span>      <span class=\"n\">recurse</span><span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">previousOperand</span><span class=\"o\">,</span> <span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">ops</span><span class=\"o\">);</span>    <span class=\"o\">}</span>    <span class=\"c1\">// ADDITION</span>    <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"+\"</span><span class=\"o\">);</span>    <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current_val_rep</span><span class=\"o\">);</span>    <span class=\"n\">recurse</span><span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"n\">ops</span><span class=\"o\">);</span>    <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>    <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>      <span class=\"c1\">// SUBTRACTION</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"-\"</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current_val_rep</span><span class=\"o\">);</span>      <span class=\"n\">recurse</span><span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">currentOperand</span><span class=\"o\">,</span> <span class=\"n\">ops</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>      <span class=\"c1\">// MULTIPLICATION</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"*\"</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current_val_rep</span><span class=\"o\">);</span>      <span class=\"n\">recurse</span><span class=\"o\">(</span>          <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>          <span class=\"n\">currentOperand</span> <span class=\"o\">*</span> <span class=\"n\">previousOperand</span><span class=\"o\">,</span>          <span class=\"mi\">0</span><span class=\"o\">,</span>          <span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">previousOperand</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">currentOperand</span> <span class=\"o\">*</span> <span class=\"n\">previousOperand</span><span class=\"o\">),</span>          <span class=\"n\">ops</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>      <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">remove</span><span class=\"o\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>    <span class=\"o\">}</span>  <span class=\"o\">}</span>  <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">addOperators</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"o\">{</span>    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;();</span>    <span class=\"o\">}</span>    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">target</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"o\">;</span>    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">digits</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"o\">;</span>    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">answer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;();</span>    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">recurse</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;());</span>    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">answer</span><span class=\"o\">;</span>  <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/19/expression-add-operators",
            
            
            
            "tags": ["leetcode","java","hard"],
            
            "date_published": "2021-09-19T00:00:00-05:00",
            "date_modified": "2021-09-19T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/18/arrays-intersection",
            "title": "Intersection of Two Arrays II",
            "summary": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
            "content_text": "Problem StatementGiven a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.Appris  Streams in Java take much time then simple array value insertion. arr1 method took 14ms, where as arr2 method only took 6msint[] arr1 = lst.stream().mapToInt(Integer::intValue).toArray();int arr2[] = new int[lst.size()];for(int i=0;i&lt;lst.size();i++) {    arr2[i] = lst.get(i);}Solutionclass Solution {    public int[] intersect(int[] nums1, int[] nums2) {        // Map to count frequeny of numbers        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();                for(int i:nums1){            map.put(i,map.getOrDefault(i,0)+1);        }                // Use Resizeable array, since there may n or m numbers         // of numbers in results         ArrayList&lt;Integer&gt; lst = new ArrayList&lt;&gt;();                for(int i:nums2){            // for each number in array 2, update the character             // frequency of initial map             if(map.containsKey(i)==true &amp;&amp; map.get(i)&gt;0){                lst.add(i);                map.put(i,map.get(i)-1);            }        }                // ArrayList -&gt; Array         int arr[] = new int[lst.size()];        for(int i=0;i&lt;lst.size();i++) {            arr[i] = lst.get(i);        }        return arr;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.</p><h3 id=\"appris\">Appris</h3><ul>  <li>Streams in Java take much time then simple array value insertion. <code>arr1</code> method took <code>14ms</code>, where as <code>arr2</code> method only took <code>6ms</code></li></ul><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr1</span> <span class=\"o\">=</span> <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"nl\">Integer:</span><span class=\"o\">:</span><span class=\"n\">intValue</span><span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span><span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()];</span><span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span><span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>    <span class=\"n\">arr2</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span><span class=\"o\">}</span></code></pre></div></div><p><br /></p><h3 id=\"solution\">Solution</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">intersect</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums1</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">nums2</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"c1\">// Map to count frequeny of numbers</span>        <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">,</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;&gt;();</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"nl\">i:</span><span class=\"n\">nums1</span><span class=\"o\">){</span>            <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">getOrDefault</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)+</span><span class=\"mi\">1</span><span class=\"o\">);</span>        <span class=\"o\">}</span>                <span class=\"c1\">// Use Resizeable array, since there may n or m numbers </span>        <span class=\"c1\">// of numbers in results </span>        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"nl\">i:</span><span class=\"n\">nums2</span><span class=\"o\">){</span>            <span class=\"c1\">// for each number in array 2, update the character </span>            <span class=\"c1\">// frequency of initial map </span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)==</span><span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)&gt;</span><span class=\"mi\">0</span><span class=\"o\">){</span>                <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>                <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)-</span><span class=\"mi\">1</span><span class=\"o\">);</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>                <span class=\"c1\">// ArrayList -&gt; Array </span>        <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()];</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span><span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/18/arrays-intersection",
            
            
            
            "tags": ["leetcode","easy"],
            
            "date_published": "2021-09-18T00:00:00-05:00",
            "date_modified": "2021-09-18T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/18/sum-of-query-ii",
            "title": "Sum of Query II",
            "summary": "You are given an array arr[] of n integers and q queries in an array queries[] of length 2*q containing l, r pair for all q queries. You need to compute the following sum over q queries.",
            "content_text": "Problem StatementYou are given an array arr[] of n integers and q queries in an array queries[] of length 2*q containing l, r pair for all q queries. You need to compute the following sum over q queries.Example  Need to find the sum of numbers between two points          why not find complete sum and remove                  the staring and          the ending sum                    starting and ending sum can be found out in O(n)      Solutionclass Solution{    List&lt;Integer&gt; querySum(int n, int arr[], int q, int queries[])    {        // code here        // find prefix_sum and suffix_sum        int[] preSum = new int[n+1];        int[] sufSum = new int[n+1];                preSum[0] = 0;        sufSum[n] = 0;        int t = 0;        for(int i=0;i&lt;n;i++){            preSum[i+1]=arr[i]+preSum[i];            t+=arr[i];        }                for(int i=n-1;i&gt;=0;i--){            sufSum[i]=arr[i]+sufSum[i+1];        }                List&lt;Integer&gt; res = new ArrayList&lt;&gt;();                for(int i=0;i&lt;2*q;i+=2){            res.add(t-preSum[queries[i]-1]-sufSum[queries[i+1]]);        }                return res;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>You are given an array arr[] of n integers and q queries in an array queries[] of length 2*q containing l, r pair for all q queries. You need to compute the following sum over q queries.</p><h2 id=\"example\">Example</h2><ul>  <li>Need to find the sum of numbers between two points    <ul>      <li>why not find complete sum and remove        <ul>          <li>the staring and</li>          <li>the ending sum</li>        </ul>      </li>      <li>starting and ending sum can be found out in <code>O(n)<code></code></code></li>    </ul>  </li></ul><h3 id=\"solution\">Solution</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span><span class=\"o\">{</span>    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">querySum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">queries</span><span class=\"o\">[])</span>    <span class=\"o\">{</span>        <span class=\"c1\">// code here</span>        <span class=\"c1\">// find prefix_sum and suffix_sum</span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">preSum</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">sufSum</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">];</span>                <span class=\"n\">preSum</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"n\">sufSum</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"n\">preSum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">preSum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>            <span class=\"n\">t</span><span class=\"o\">+=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>        <span class=\"o\">}</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">--){</span>            <span class=\"n\">sufSum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">sufSum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span>                <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">+=</span><span class=\"mi\">2</span><span class=\"o\">){</span>            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"n\">preSum</span><span class=\"o\">[</span><span class=\"n\">queries</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"mi\">1</span><span class=\"o\">]-</span><span class=\"n\">sufSum</span><span class=\"o\">[</span><span class=\"n\">queries</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">]]);</span>        <span class=\"o\">}</span>                <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/18/sum-of-query-ii",
            
            
            
            "tags": ["gfg","medium","potd"],
            
            "date_published": "2021-09-18T00:00:00-05:00",
            "date_modified": "2021-09-18T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/17/spiral-order-in-matrix",
            "title": "Spiral order in matrix.",
            "summary": "Given an m x n matrix, return all elements of the matrix in spiral order.",
            "content_text": "Problem StatementGiven an m x n matrix, return all elements of the matrix in spiral order.Edge Cases  Even and Odd Number of Rows and Columns[[1,2,3],[4,5,6],[7,8,9],[7,8,9]][[1,2,3,4],[5,6,7,8],[9,10,11,12],[9,10,11,12]]SolutionCode:class Solution {    public List&lt;Integer&gt; spiralOrder(int[][] matrix) {        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();                int n = matrix.length;        int m = matrix[0].length;                int x0 =0,x1=m-1;        int y0=0,y1=n-1;                        while(x0&lt;=x1 &amp;&amp; y0&lt;=y1){                        for(int i=x0;i&lt;=x1;i++){                res.add(matrix[y0][i]);            }            y0++;                        for(int j=y0;j&lt;=y1;j++){                res.add(matrix[j][x1]);            }            x1--;                        if(y0&lt;=y1){                for(int i=x1;i&gt;=x0;i--){                    res.add(matrix[y1][i]);                }            }            y1--;            if(x0&lt;=x1){                for(int j=y1;j&gt;=y0;j--){                    res.add(matrix[j][x0]);                }            }            x0++;        }        return res;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given an m x n matrix, return all elements of the matrix in spiral order.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>Even and Odd Number of Rows and Columns</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[[1,2,3],[4,5,6],[7,8,9],[7,8,9]][[1,2,3,4],[5,6,7,8],[9,10,11,12],[9,10,11,12]]</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">spiralOrder</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>                <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span>                <span class=\"kt\">int</span> <span class=\"n\">x0</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">x1</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">y0</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">y1</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>                        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">x0</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y0</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">){</span>                        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">x0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">y0</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]);</span>            <span class=\"o\">}</span>            <span class=\"n\">y0</span><span class=\"o\">++;</span>                        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">y0</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">++){</span>                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">x1</span><span class=\"o\">]);</span>            <span class=\"o\">}</span>            <span class=\"n\">x1</span><span class=\"o\">--;</span>                        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">y0</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">){</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">x1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"n\">x0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">--){</span>                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">y1</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]);</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>            <span class=\"n\">y1</span><span class=\"o\">--;</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x0</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span><span class=\"o\">){</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">y1</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">&gt;=</span><span class=\"n\">y0</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">--){</span>                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">x0</span><span class=\"o\">]);</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>            <span class=\"n\">x0</span><span class=\"o\">++;</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/17/spiral-order-in-matrix",
            
            
            
            "tags": ["leetcode","java"],
            
            "date_published": "2021-09-17T00:00:00-05:00",
            "date_modified": "2021-09-17T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/17/kth-element-of-two-sorted-arrays",
            "title": "K-th element of two sorted Arrays",
            "summary": "Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.",
            "content_text": "Problem StatementGiven two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.Edge Cases  What if arrays are sorted and given.5 7 672 86 100 112 113119 256 265 349 445 770 892SolutionCode:class Solution {    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {        int a1 = 0;        int a2 = 0;        boolean flag = true;                for(int i=0;i&lt;k;i++){            if(a1&gt;=n){                flag = false;                a2++;            }else if (a2&gt;=m){                flag = true;                a1++;            }else{                if(arr1[a1]&lt;=arr2[a2]){                    flag=true;                    a1++;                }else{                    flag=false;                    a2++;                }            }        }        if(flag){            return  arr1[a1-1];        }else{            return arr2[a2-1];        }    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>What if arrays are sorted and given.</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>5 7 672 86 100 112 113119 256 265 349 445 770 892</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">kthElement</span><span class=\"o\">(</span> <span class=\"kt\">int</span> <span class=\"n\">arr1</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"kt\">int</span> <span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">k</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">&gt;=</span><span class=\"n\">n</span><span class=\"o\">){</span>                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>                <span class=\"n\">a2</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a2</span><span class=\"o\">&gt;=</span><span class=\"n\">m</span><span class=\"o\">){</span>                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>                <span class=\"n\">a1</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">arr1</span><span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">]&lt;=</span><span class=\"n\">arr2</span><span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">]){</span>                    <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"o\">;</span>                    <span class=\"n\">a1</span><span class=\"o\">++;</span>                <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>                    <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"o\">;</span>                    <span class=\"n\">a2</span><span class=\"o\">++;</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">){</span>            <span class=\"k\">return</span>  <span class=\"n\">arr1</span><span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>            <span class=\"k\">return</span> <span class=\"n\">arr2</span><span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/17/kth-element-of-two-sorted-arrays",
            
            
            
            "tags": ["gfg","potd","java"],
            
            "date_published": "2021-09-17T00:00:00-05:00",
            "date_modified": "2021-09-17T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/16/n-meetings-in-one-room",
            "title": "N meetings in one room",
            "summary": "Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.",
            "content_text": "Problem StatementThere is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?Solutionclass Solution {    //Function to find the maximum number of meetings that can    //be performed in a meeting room.    public static int maxMeetings(int start[], int end[], int n)    {        // add your code here        ArrayList&lt;Meet&gt; schd = new ArrayList&lt;&gt;();        for(int i=0;i&lt;n;i++){            schd.add(new Meet(start[i],end[i]));        }        Collections.sort(schd,(Meet m1, Meet m2) -&gt; {            if(m1.e==m2.e){                return m2.s-m1.s;            }            return m1.e-m2.e;        });                int cnt = 0;        // System.out.println(schd);        int l = Integer.MIN_VALUE;        for(int i=0;i&lt;n;i++){            if(schd.get(i).s&gt;l){                l = schd.get(i).e;                cnt++;            }        }        return cnt;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?</p><h3 id=\"solution\">Solution</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"c1\">//Function to find the maximum number of meetings that can</span>    <span class=\"c1\">//be performed in a meeting room.</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">maxMeetings</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">{</span>        <span class=\"c1\">// add your code here</span>        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Meet</span><span class=\"o\">&gt;</span> <span class=\"n\">schd</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Meet</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">end</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]));</span>        <span class=\"o\">}</span>        <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">schd</span><span class=\"o\">,(</span><span class=\"nc\">Meet</span> <span class=\"n\">m1</span><span class=\"o\">,</span> <span class=\"nc\">Meet</span> <span class=\"n\">m2</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">==</span><span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">){</span>                <span class=\"k\">return</span> <span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">s</span><span class=\"o\">-</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">s</span><span class=\"o\">;</span>            <span class=\"o\">}</span>            <span class=\"k\">return</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">-</span><span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">;</span>        <span class=\"o\">});</span>                <span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"c1\">// System.out.println(schd);</span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"n\">l</span><span class=\"o\">){</span>                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">e</span><span class=\"o\">;</span>                <span class=\"n\">cnt</span><span class=\"o\">++;</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> <span class=\"n\">cnt</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/16/n-meetings-in-one-room",
            
            
            
            "tags": ["gfg","potd","java"],
            
            "date_published": "2021-09-16T00:00:00-05:00",
            "date_modified": "2021-09-16T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/15/sort-an-array-of-0s-1s-and-2s",
            "title": "Sort an array of 0s, 1s and 2s",
            "summary": "Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.",
            "content_text": "Problem StatementGiven an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.TriviaThis is called as Dutch National Flag AlgorithmSolutionCode:class Solution{    public static void sort012(int a[], int n)    {        // code here         int l =0;        int m =0;        int f = n-1;        while(m&lt;=f){            if(a[m]==0){                swap(a,m,l);                m++;                l++;            }else if(a[m]==1){                m++;            }else if(a[m]==2){                swap(a,m,f);                f--;            }        }    }    private static void swap(int[] arr, int i, int j){        //3      1        2        arr[i]=arr[i]+arr[j];        //1     3        2        arr[j]=arr[i]-arr[j];        //2     3        1        arr[i]=arr[i]-arr[j];    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.</p><h2 id=\"trivia\">Trivia</h2><p>This is called as Dutch National Flag Algorithm</p><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span><span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort012</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">{</span>        <span class=\"c1\">// code here </span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">&lt;=</span><span class=\"n\">f</span><span class=\"o\">){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">0</span><span class=\"o\">){</span>                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">);</span>                <span class=\"n\">m</span><span class=\"o\">++;</span>                <span class=\"n\">l</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">1</span><span class=\"o\">){</span>                <span class=\"n\">m</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">2</span><span class=\"o\">){</span>                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">);</span>                <span class=\"n\">f</span><span class=\"o\">--;</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>    <span class=\"o\">}</span>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">){</span>        <span class=\"c1\">//3      1        2</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>        <span class=\"c1\">//1     3        2</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>        <span class=\"c1\">//2     3        1</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/15/sort-an-array-of-0s-1s-and-2s",
            
            
            
            "tags": ["gfg","potd","java"],
            
            "date_published": "2021-09-15T00:00:00-05:00",
            "date_modified": "2021-09-15T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/14/remove-loop-in-linkedlist",
            "title": "Remove loop in Linked List",
            "summary": "This is a collection of short CSS snippets I thought might be useful for beginners",
            "content_text": "Problem StatementGiven a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.Edge Cases  Even Length Circular Linkedlist.41 2 3 41SolutionCode:class Solution{    //Function to remove a loop in the linked list.    public static void removeLoop(Node head){        // code here        // remove the loop without losing any nodes        if(head==null || head.next==null){            return;        }        Node fast = head;        Node slow = head;        Node prev = head;        do{            fast = fast.next.next;            prev = slow;            slow = slow.next;        }while(slow != fast &amp;&amp; fast!=null &amp;&amp; fast.next!=null);                // check if no loop        if(fast==null || fast.next == null){            return;        }                if(prev.next==head){            prev.next=null;            return;        }        // even length Circular Linked List Edge Case        fast = head;        Node temp=null;        while(fast!=slow){            fast=fast.next;            temp = slow;            slow=slow.next;        }        temp.next = null;        return;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>Even Length Circular Linkedlist.</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>41 2 3 41</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span><span class=\"o\">{</span>    <span class=\"c1\">//Function to remove a loop in the linked list.</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">removeLoop</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">head</span><span class=\"o\">){</span>        <span class=\"c1\">// code here</span>        <span class=\"c1\">// remove the loop without losing any nodes</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"nc\">Node</span> <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"k\">do</span><span class=\"o\">{</span>            <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>            <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">;</span>            <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>        <span class=\"o\">}</span><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">slow</span> <span class=\"o\">!=</span> <span class=\"n\">fast</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fast</span><span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">);</span>                <span class=\"c1\">// check if no loop</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">==</span><span class=\"n\">head</span><span class=\"o\">){</span>            <span class=\"n\">prev</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"o\">;</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"c1\">// even length Circular Linked List Edge Case</span>        <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">temp</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"o\">;</span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">!=</span><span class=\"n\">slow</span><span class=\"o\">){</span>            <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">;</span>            <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>        <span class=\"k\">return</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/14/remove-loop-in-linkedlist",
            
            
            
            "tags": ["gfg","potd","java","edge_case"],
            
            "date_published": "2021-09-14T00:00:00-05:00",
            "date_modified": "2021-09-14T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}