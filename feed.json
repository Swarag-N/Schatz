{
    "version": "https://jsonfeed.org/version/1",
    "title": "Schatz",
    "home_page_url": "https://swarag-n.github.io/Schatz/",
    "feed_url": "https://swarag-n.github.io/Schatz/feed.json",
    "description": "Journey to One Piece",
    "icon": "https://swarag-n.github.io/Schatz/apple-touch-icon.png",
    "favicon": "https://swarag-n.github.io/Schatz/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Swarag Narayanasetty",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/17/spiral-order-in-matrix",
            "title": "Spiral order in matrix.",
            "summary": "Given an m x n matrix, return all elements of the matrix in spiral order.",
            "content_text": "Problem StatementGiven an m x n matrix, return all elements of the matrix in spiral order.Edge Cases  Even and Odd Number of Rows and Columns[[1,2,3],[4,5,6],[7,8,9],[7,8,9]][[1,2,3,4],[5,6,7,8],[9,10,11,12],[9,10,11,12]]SolutionCode:class Solution {    public List&lt;Integer&gt; spiralOrder(int[][] matrix) {        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();                int n = matrix.length;        int m = matrix[0].length;                int x0 =0,x1=m-1;        int y0=0,y1=n-1;                        while(x0&lt;=x1 &amp;&amp; y0&lt;=y1){                        for(int i=x0;i&lt;=x1;i++){                res.add(matrix[y0][i]);            }            y0++;                        for(int j=y0;j&lt;=y1;j++){                res.add(matrix[j][x1]);            }            x1--;                        if(y0&lt;=y1){                for(int i=x1;i&gt;=x0;i--){                    res.add(matrix[y1][i]);                }            }            y1--;            if(x0&lt;=x1){                for(int j=y1;j&gt;=y0;j--){                    res.add(matrix[j][x0]);                }            }            x0++;        }        return res;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given an m x n matrix, return all elements of the matrix in spiral order.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>Even and Odd Number of Rows and Columns</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[[1,2,3],[4,5,6],[7,8,9],[7,8,9]][[1,2,3,4],[5,6,7,8],[9,10,11,12],[9,10,11,12]]</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">spiralOrder</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[][]</span> <span class=\"n\">matrix</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>                <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">length</span><span class=\"o\">;</span>                <span class=\"kt\">int</span> <span class=\"n\">x0</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">x1</span><span class=\"o\">=</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">y0</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">y1</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>                        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">x0</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y0</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">){</span>                        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">x0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">y0</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]);</span>            <span class=\"o\">}</span>            <span class=\"n\">y0</span><span class=\"o\">++;</span>                        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">y0</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">++){</span>                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">x1</span><span class=\"o\">]);</span>            <span class=\"o\">}</span>            <span class=\"n\">x1</span><span class=\"o\">--;</span>                        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">y0</span><span class=\"o\">&lt;=</span><span class=\"n\">y1</span><span class=\"o\">){</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">x1</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"n\">x0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">--){</span>                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">y1</span><span class=\"o\">][</span><span class=\"n\">i</span><span class=\"o\">]);</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>            <span class=\"n\">y1</span><span class=\"o\">--;</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">x0</span><span class=\"o\">&lt;=</span><span class=\"n\">x1</span><span class=\"o\">){</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">y1</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">&gt;=</span><span class=\"n\">y0</span><span class=\"o\">;</span><span class=\"n\">j</span><span class=\"o\">--){</span>                    <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">][</span><span class=\"n\">x0</span><span class=\"o\">]);</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>            <span class=\"n\">x0</span><span class=\"o\">++;</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/17/spiral-order-in-matrix",
            
            
            
            
            
            "date_published": "2021-09-17T00:00:00-05:00",
            "date_modified": "2021-09-17T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/17/kth-element-of-two-sorted-arrays",
            "title": "K-th element of two sorted Arrays",
            "summary": "Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.",
            "content_text": "Problem StatementGiven two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.Edge Cases  What if arrays are sorted and given.5 7 672 86 100 112 113119 256 265 349 445 770 892SolutionCode:class Solution {    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {        int a1 = 0;        int a2 = 0;        boolean flag = true;                for(int i=0;i&lt;k;i++){            if(a1&gt;=n){                flag = false;                a2++;            }else if (a2&gt;=m){                flag = true;                a1++;            }else{                if(arr1[a1]&lt;=arr2[a2]){                    flag=true;                    a1++;                }else{                    flag=false;                    a2++;                }            }        }        if(flag){            return  arr1[a1-1];        }else{            return arr2[a2-1];        }    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the k’th position of the final sorted array.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>What if arrays are sorted and given.</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>5 7 672 86 100 112 113119 256 265 349 445 770 892</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">kthElement</span><span class=\"o\">(</span> <span class=\"kt\">int</span> <span class=\"n\">arr1</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span>        <span class=\"kt\">int</span> <span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>                <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">k</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">&gt;=</span><span class=\"n\">n</span><span class=\"o\">){</span>                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>                <span class=\"n\">a2</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a2</span><span class=\"o\">&gt;=</span><span class=\"n\">m</span><span class=\"o\">){</span>                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>                <span class=\"n\">a1</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">arr1</span><span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">]&lt;=</span><span class=\"n\">arr2</span><span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">]){</span>                    <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"o\">;</span>                    <span class=\"n\">a1</span><span class=\"o\">++;</span>                <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>                    <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"o\">;</span>                    <span class=\"n\">a2</span><span class=\"o\">++;</span>                <span class=\"o\">}</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">){</span>            <span class=\"k\">return</span>  <span class=\"n\">arr1</span><span class=\"o\">[</span><span class=\"n\">a1</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span><span class=\"k\">else</span><span class=\"o\">{</span>            <span class=\"k\">return</span> <span class=\"n\">arr2</span><span class=\"o\">[</span><span class=\"n\">a2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>        <span class=\"o\">}</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/17/kth-element-of-two-sorted-arrays",
            
            
            
            "tags": ["gfg","potd"],
            
            "date_published": "2021-09-17T00:00:00-05:00",
            "date_modified": "2021-09-17T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/16/n-meetings-in-one-room",
            "title": "N meetings in one room",
            "summary": "Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.",
            "content_text": "Problem StatementThere is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?Solutionclass Solution {    //Function to find the maximum number of meetings that can    //be performed in a meeting room.    public static int maxMeetings(int start[], int end[], int n)    {        // add your code here        ArrayList&lt;Meet&gt; schd = new ArrayList&lt;&gt;();        for(int i=0;i&lt;n;i++){            schd.add(new Meet(start[i],end[i]));        }        Collections.sort(schd,(Meet m1, Meet m2) -&gt; {            if(m1.e==m2.e){                return m2.s-m1.s;            }            return m1.e-m2.e;        });                int cnt = 0;        // System.out.println(schd);        int l = Integer.MIN_VALUE;        for(int i=0;i&lt;n;i++){            if(schd.get(i).s&gt;l){                l = schd.get(i).e;                cnt++;            }        }        return cnt;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?</p><h3 id=\"solution\">Solution</h3><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>    <span class=\"c1\">//Function to find the maximum number of meetings that can</span>    <span class=\"c1\">//be performed in a meeting room.</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">maxMeetings</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">{</span>        <span class=\"c1\">// add your code here</span>        <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"nc\">Meet</span><span class=\"o\">&gt;</span> <span class=\"n\">schd</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Meet</span><span class=\"o\">(</span><span class=\"n\">start</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span><span class=\"n\">end</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]));</span>        <span class=\"o\">}</span>        <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">sort</span><span class=\"o\">(</span><span class=\"n\">schd</span><span class=\"o\">,(</span><span class=\"nc\">Meet</span> <span class=\"n\">m1</span><span class=\"o\">,</span> <span class=\"nc\">Meet</span> <span class=\"n\">m2</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">==</span><span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">){</span>                <span class=\"k\">return</span> <span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">s</span><span class=\"o\">-</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">s</span><span class=\"o\">;</span>            <span class=\"o\">}</span>            <span class=\"k\">return</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">-</span><span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">;</span>        <span class=\"o\">});</span>                <span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"c1\">// System.out.println(schd);</span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span><span class=\"o\">;</span>        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"o\">;</span><span class=\"n\">i</span><span class=\"o\">++){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"n\">l</span><span class=\"o\">){</span>                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">schd</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">e</span><span class=\"o\">;</span>                <span class=\"n\">cnt</span><span class=\"o\">++;</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>        <span class=\"k\">return</span> <span class=\"n\">cnt</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/16/n-meetings-in-one-room",
            
            
            
            "tags": ["gfg","potd"],
            
            "date_published": "2021-09-16T00:00:00-05:00",
            "date_modified": "2021-09-16T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/15/sort-an-array-of-0s-1s-and-2s",
            "title": "Sort an array of 0s, 1s and 2s",
            "summary": "Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.",
            "content_text": "Problem StatementGiven an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.TriviaThis is called as Dutch National Flag AlgorithmSolutionCode:class Solution{    public static void sort012(int a[], int n)    {        // code here         int l =0;        int m =0;        int f = n-1;        while(m&lt;=f){            if(a[m]==0){                swap(a,m,l);                m++;                l++;            }else if(a[m]==1){                m++;            }else if(a[m]==2){                swap(a,m,f);                f--;            }        }    }    private static void swap(int[] arr, int i, int j){        //3      1        2        arr[i]=arr[i]+arr[j];        //1     3        2        arr[j]=arr[i]-arr[j];        //2     3        1        arr[i]=arr[i]-arr[j];    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array. The functions should put all 0s first, then all 1s and all 2s in last.</p><h2 id=\"trivia\">Trivia</h2><p>This is called as Dutch National Flag Algorithm</p><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span><span class=\"o\">{</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sort012</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">{</span>        <span class=\"c1\">// code here </span>        <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>        <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">&lt;=</span><span class=\"n\">f</span><span class=\"o\">){</span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">0</span><span class=\"o\">){</span>                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"o\">);</span>                <span class=\"n\">m</span><span class=\"o\">++;</span>                <span class=\"n\">l</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">1</span><span class=\"o\">){</span>                <span class=\"n\">m</span><span class=\"o\">++;</span>            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]==</span><span class=\"mi\">2</span><span class=\"o\">){</span>                <span class=\"n\">swap</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">);</span>                <span class=\"n\">f</span><span class=\"o\">--;</span>            <span class=\"o\">}</span>        <span class=\"o\">}</span>    <span class=\"o\">}</span>    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">){</span>        <span class=\"c1\">//3      1        2</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]+</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>        <span class=\"c1\">//1     3        2</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>        <span class=\"c1\">//2     3        1</span>        <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]=</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]-</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">];</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/15/sort-an-array-of-0s-1s-and-2s",
            
            
            
            "tags": ["gfg","potd"],
            
            "date_published": "2021-09-15T00:00:00-05:00",
            "date_modified": "2021-09-15T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://swarag-n.github.io/Schatz/2021/09/14/remove-loop-in-linkedlist",
            "title": "Remove loop in Linked List",
            "summary": "This is a collection of short CSS snippets I thought might be useful for beginners",
            "content_text": "Problem StatementGiven a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.Edge Cases  Even Length Circular Linkedlist.41 2 3 41SolutionCode:class Solution{    //Function to remove a loop in the linked list.    public static void removeLoop(Node head){        // code here        // remove the loop without losing any nodes        if(head==null || head.next==null){            return;        }        Node fast = head;        Node slow = head;        Node prev = head;        do{            fast = fast.next.next;            prev = slow;            slow = slow.next;        }while(slow != fast &amp;&amp; fast!=null &amp;&amp; fast.next!=null);                // check if no loop        if(fast==null || fast.next == null){            return;        }                if(prev.next==head){            prev.next=null;            return;        }        // even length Circular Linked List Edge Case        fast = head;        Node temp=null;        while(fast!=slow){            fast=fast.next;            temp = slow;            slow=slow.next;        }        temp.next = null;        return;    }}",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Given a linked list of N nodes such that it may contain a loop.A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.Remove the loop from the linked list, if it is present.</p><h3 id=\"edge-cases\">Edge Cases</h3><ul>  <li>Even Length Circular Linkedlist.</li></ul><div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>41 2 3 41</code></pre></div></div><h3 id=\"solution\">Solution</h3><p>Code:</p><div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span><span class=\"o\">{</span>    <span class=\"c1\">//Function to remove a loop in the linked list.</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">removeLoop</span><span class=\"o\">(</span><span class=\"nc\">Node</span> <span class=\"n\">head</span><span class=\"o\">){</span>        <span class=\"c1\">// code here</span>        <span class=\"c1\">// remove the loop without losing any nodes</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">head</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"nc\">Node</span> <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"k\">do</span><span class=\"o\">{</span>            <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>            <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">;</span>            <span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>        <span class=\"o\">}</span><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">slow</span> <span class=\"o\">!=</span> <span class=\"n\">fast</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fast</span><span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">!=</span><span class=\"kc\">null</span><span class=\"o\">);</span>                <span class=\"c1\">// check if no loop</span>        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">==</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">prev</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">==</span><span class=\"n\">head</span><span class=\"o\">){</span>            <span class=\"n\">prev</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"o\">;</span>            <span class=\"k\">return</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"c1\">// even length Circular Linked List Edge Case</span>        <span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>        <span class=\"nc\">Node</span> <span class=\"n\">temp</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"o\">;</span>        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">fast</span><span class=\"o\">!=</span><span class=\"n\">slow</span><span class=\"o\">){</span>            <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"n\">fast</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">slow</span><span class=\"o\">;</span>            <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"n\">slow</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">;</span>        <span class=\"o\">}</span>        <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"na\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>        <span class=\"k\">return</span><span class=\"o\">;</span>    <span class=\"o\">}</span><span class=\"o\">}</span></code></pre></div></div>",
            "url": "https://swarag-n.github.io/Schatz/2021/09/14/remove-loop-in-linkedlist",
            
            
            
            "tags": ["gfg","potd"],
            
            "date_published": "2021-09-14T00:00:00-05:00",
            "date_modified": "2021-09-14T00:00:00-05:00",
            
                "author":  {
                "name": "Swarag Narayanasetty",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}